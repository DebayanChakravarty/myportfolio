name: build-and-deploy-angular-to-hostinger

on:
  push:
    branches: [ main ]          # change if your main branch is different
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: hostinger-deploy
  cancel-in-progress: true

env:
  # If your Angular project is in a subfolder, set it here (e.g., "myportfolio").
  # Leave empty ("") if your package.json is at repo root.
  WORKDIR: ""

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Move into subfolder if needed
      - name: Change working directory (if any)
        if: ${{ env.WORKDIR != '' }}
        run: echo "Entering $WORKDIR"
        working-directory: ${{ env.WORKDIR }}

      # Detect lock files to avoid the cache error
      - name: Detect lockfile
        id: lock
        run: |
          HAS_NPM=false; HAS_YARN=false
          [ -f package-lock.json ] && HAS_NPM=true
          [ -f yarn.lock ] && HAS_YARN=true
          echo "has_npm=$HAS_NPM" >> $GITHUB_OUTPUT
          echo "has_yarn=$HAS_YARN" >> $GITHUB_OUTPUT

      # Setup Node with npm cache ONLY if package-lock.json exists
      - name: Setup Node (npm cache)
        if: steps.lock.outputs.has_npm == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ${{ env.WORKDIR != '' && format('{0}/package-lock.json', env.WORKDIR) || 'package-lock.json' }}

      # Fallback: setup Node without cache (prevents "Some specified paths were not resolved")
      - name: Setup Node (no cache)
        if: steps.lock.outputs.has_npm != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          elif [ -f yarn.lock ]; then
            yarn install --frozen-lockfile
          else
            echo "No lock file found; using 'npm install'. Consider committing package-lock.json."
            npm install
          fi
        working-directory: ${{ env.WORKDIR != '' && env.WORKDIR || '.' }}

      - name: Build
        run: npm run build
        working-directory: ${{ env.WORKDIR != '' && env.WORKDIR || '.' }}

      # Find dist/<app-name> or fallback to dist
      - name: Resolve dist folder
        id: dist
        run: |
          cd "${WORKDIR:-.}"
          BUILD_DIR="$(ls -d dist/*/ 2>/dev/null | head -n 1)"
          BUILD_DIR="${BUILD_DIR%/}"
          [ -z "$BUILD_DIR" ] && BUILD_DIR="dist"
          echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
          echo "Resolved build directory: $BUILD_DIR"

      # Add SPA fallback so deep links work on Hostinger/Apache
      - name: Add .htaccess (SPA)
        run: |
          cat > "${{ env.WORKDIR != '' && format('{0}/{1}', env.WORKDIR, env.BUILD_DIR) || env.BUILD_DIR }}/.htaccess" << 'EOF'
          Options -MultiViews
          RewriteEngine On
          RewriteBase /

          RewriteCond %{REQUEST_FILENAME} -f [OR]
          RewriteCond %{REQUEST_FILENAME} -d
          RewriteRule ^ - [L]

          RewriteRule . /index.html [L]
          EOF

      # Publish ONLY the built files to the 'deploy' branch (Hostinger auto-pulls this into /public_html)
      - name: Publish to deploy branch
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: deploy
          folder: ${{ env.WORKDIR != '' && format('{0}/{1}', env.WORKDIR, env.BUILD_DIR) || env.BUILD_DIR }}
          clean: true

      # Explicitly ping Hostinger webhook to pull the latest deploy branch
      - name: Trigger Hostinger auto-deploy webhook
        run: |
          curl -fsS -X POST "$HOSTINGER_WEBHOOK_URL" || curl -fsS "$HOSTINGER_WEBHOOK_URL" || true
        env:
          HOSTINGER_WEBHOOK_URL: ${{ secrets.HOSTINGER_WEBHOOK_URL }}
